{"ast":null,"code":"var _jsxFileName = \"/Users/support/Development/code/phase-3/my-app-frontend/src/LocationContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Search from \"./Search\";\nimport LocationCard from \"./LocationCard\";\n//this component is where we store our locations\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LocationContainer(_ref) {\n  _s();\n  let {\n    data,\n    setData\n  } = _ref;\n  const [search, setSearch] = useState(\"\");\n  //fetching data from our db.json \n  useEffect(() => {\n    fetch(\"http://localhost:9292/\").then(r => r.json()).then(data => setData(data));\n  }, []);\n\n  //handles deleting a venue by taking in its id\n  function handleDeleteLocation(id) {\n    const updatedLocationArray = data.locations.filter(location => location.id !== id);\n    setData(updatedLocationArray);\n  }\n  ////new array that filters through if name, description or location matches the search terms. Also handles case insensitive matches\n  const filteredLocations = data.locations.filter(location => {\n    return location.city.toLowerCase().includes(search.toLowerCase()) || location.state.toLowerCase().includes(search.toLowerCase());\n    // || location.location.toLowerCase().includes(search.toLowerCase())\n  });\n  ////iterating over the filtered array and creating a separate VenueCard for each venue\n  const locationCards = filteredLocations.map(locationObj => {\n    return /*#__PURE__*/_jsxDEV(LocationCard, {\n      location: locationObj,\n      onDeleteLocation: handleDeleteLocation\n    }, locationObj.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      onSearch: setSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"cards\",\n      children: locationCards\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n}\n_s(LocationContainer, \"/GLerps70H6LPpMRxJUwTVVbb9A=\");\n_c = LocationContainer;\nexport default LocationContainer;\nvar _c;\n$RefreshReg$(_c, \"LocationContainer\");","map":{"version":3,"names":["React","useState","useEffect","Search","LocationCard","LocationContainer","data","setData","search","setSearch","fetch","then","r","json","handleDeleteLocation","id","updatedLocationArray","locations","filter","location","filteredLocations","city","toLowerCase","includes","state","locationCards","map","locationObj"],"sources":["/Users/support/Development/code/phase-3/my-app-frontend/src/LocationContainer.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport Search from \"./Search\";\nimport LocationCard from \"./LocationCard\";\n//this component is where we store our locations\nfunction LocationContainer({data, setData}) {\n  const [search, setSearch] = useState(\"\");\n//fetching data from our db.json \n  useEffect(() => {\n    fetch(\"http://localhost:9292/\")\n      .then((r) => r.json())\n      .then((data) => setData(data)); \n  }, []); \n  \n  \n//handles deleting a venue by taking in its id\n      function handleDeleteLocation(id) {\n        const updatedLocationArray = data.locations.filter(location => location.id !== id);\n        setData(updatedLocationArray);\n      }\n////new array that filters through if name, description or location matches the search terms. Also handles case insensitive matches\n      const filteredLocations = data.locations.filter(location => {\n        return (location.city.toLowerCase().includes(search.toLowerCase())) \n        || location.state.toLowerCase().includes(search.toLowerCase())\n        // || location.location.toLowerCase().includes(search.toLowerCase())\n      })\n////iterating over the filtered array and creating a separate VenueCard for each venue\n      const locationCards = filteredLocations.map(locationObj => {\n        return <LocationCard \n          key={locationObj.id} \n          location={locationObj} \n          onDeleteLocation={handleDeleteLocation}/>\n      })\n\n    return (\n        <div>\n          <Search onSearch={setSearch}/>\n            <ul className=\"cards\">\n                {locationCards}\n            </ul>\n        </div>\n    )\n}\n\nexport default LocationContainer;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAChD,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,YAAY,MAAM,gBAAgB;AACzC;AAAA;AACA,SAASC,iBAAiB,OAAkB;EAAA;EAAA,IAAjB;IAACC,IAAI;IAAEC;EAAO,CAAC;EACxC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1C;EACEC,SAAS,CAAC,MAAM;IACdQ,KAAK,CAAC,wBAAwB,CAAC,CAC5BC,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,EAAE,CAAC,CACrBF,IAAI,CAAEL,IAAI,IAAKC,OAAO,CAACD,IAAI,CAAC,CAAC;EAClC,CAAC,EAAE,EAAE,CAAC;;EAGR;EACM,SAASQ,oBAAoB,CAACC,EAAE,EAAE;IAChC,MAAMC,oBAAoB,GAAGV,IAAI,CAACW,SAAS,CAACC,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACJ,EAAE,KAAKA,EAAE,CAAC;IAClFR,OAAO,CAACS,oBAAoB,CAAC;EAC/B;EACN;EACM,MAAMI,iBAAiB,GAAGd,IAAI,CAACW,SAAS,CAACC,MAAM,CAACC,QAAQ,IAAI;IAC1D,OAAQA,QAAQ,CAACE,IAAI,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACf,MAAM,CAACc,WAAW,EAAE,CAAC,IAC/DH,QAAQ,CAACK,KAAK,CAACF,WAAW,EAAE,CAACC,QAAQ,CAACf,MAAM,CAACc,WAAW,EAAE,CAAC;IAC9D;EACF,CAAC,CAAC;EACR;EACM,MAAMG,aAAa,GAAGL,iBAAiB,CAACM,GAAG,CAACC,WAAW,IAAI;IACzD,oBAAO,QAAC,YAAY;MAElB,QAAQ,EAAEA,WAAY;MACtB,gBAAgB,EAAEb;IAAqB,GAFlCa,WAAW,CAACZ,EAAE;MAAA;MAAA;MAAA;IAAA,QAEsB;EAC7C,CAAC,CAAC;EAEJ,oBACI;IAAA,wBACE,QAAC,MAAM;MAAC,QAAQ,EAAEN;IAAU;MAAA;MAAA;MAAA;IAAA,QAAE,eAC5B;MAAI,SAAS,EAAC,OAAO;MAAA,UAChBgB;IAAa;MAAA;MAAA;MAAA;IAAA,QACb;EAAA;IAAA;IAAA;IAAA;EAAA,QACH;AAEd;AAAC,GArCQpB,iBAAiB;AAAA,KAAjBA,iBAAiB;AAuC1B,eAAeA,iBAAiB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}